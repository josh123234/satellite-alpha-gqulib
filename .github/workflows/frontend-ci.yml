name: Frontend CI

on:
  push:
    branches: [ main, develop ]
    paths: [ 'src/web/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'src/web/**' ]

env:
  NODE_VERSION: '20.x'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/web/package.json'

      - name: Install Dependencies
        working-directory: src/web
        run: npm ci

      - name: Lint Check
        working-directory: src/web
        run: npm run lint:ci
        
      - name: Type Check
        working-directory: src/web
        run: tsc --noEmit --project tsconfig.json

      - name: Bundle Analysis
        working-directory: src/web
        run: |
          npm run build:prod
          npm run analyze
          
      - name: Upload Lint Results
        uses: actions/upload-artifact@v3
        with:
          name: lint-results
          path: src/web/reports/lint/
          retention-days: 7

      - name: Upload Bundle Analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: src/web/reports/bundle/
          retention-days: 7

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/web/package.json'

      - name: Install Dependencies
        working-directory: src/web
        run: npm ci

      - name: Run Unit Tests
        working-directory: src/web
        run: npm run test:ci

      - name: Run E2E Tests
        working-directory: src/web
        run: npm run e2e:ci

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage
          path: src/web/coverage/
          retention-days: 7

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: src/web/reports/tests/
          retention-days: 7

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: src/web/coverage/
          flags: frontend
          fail_ci_if_error: true

  security-scan:
    needs: [code-quality]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Snyk Security Scan
        uses: snyk/actions/node@v3
        with:
          args: --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}

      - name: NPM Audit
        working-directory: src/web
        run: npm audit --audit-level=high

      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: src/web/reports/security/
          retention-days: 7

  build-container:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: src/web
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/frontend:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/frontend:latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/frontend:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/frontend:buildcache,mode=max

      - name: Scan Container Image
        uses: aquasecurity/trivy-action@0.16.1
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/frontend:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true

      - name: Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: container-scan

notifications:
  slack:
    on_success: change
    on_failure: always
    channels:
      - frontend-ci